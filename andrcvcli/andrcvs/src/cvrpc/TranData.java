/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cvrpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
//import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
//@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-25")
public class TranData {

  public interface Iface {

    public String hello_string(String para) throws org.apache.thrift.TException;

    public ByteBuffer opencv_rpc(String fun_name, List<String> pa, ByteBuffer in_data) throws org.apache.thrift.TException;

    public ByteBuffer read_image(String file_name, Map<String,String> pa) throws org.apache.thrift.TException;

    public List<String> image_match(ByteBuffer img_data, List<String> pa) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void hello_string(String para, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void opencv_rpc(String fun_name, List<String> pa, ByteBuffer in_data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void read_image(String file_name, Map<String,String> pa, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void image_match(ByteBuffer img_data, List<String> pa, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String hello_string(String para) throws org.apache.thrift.TException
    {
      send_hello_string(para);
      return recv_hello_string();
    }

    public void send_hello_string(String para) throws org.apache.thrift.TException
    {
      hello_string_args args = new hello_string_args();
      args.setPara(para);
      sendBase("hello_string", args);
    }

    public String recv_hello_string() throws org.apache.thrift.TException
    {
      hello_string_result result = new hello_string_result();
      receiveBase(result, "hello_string");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hello_string failed: unknown result");
    }

    public ByteBuffer opencv_rpc(String fun_name, List<String> pa, ByteBuffer in_data) throws org.apache.thrift.TException
    {
      send_opencv_rpc(fun_name, pa, in_data);
      return recv_opencv_rpc();
    }

    public void send_opencv_rpc(String fun_name, List<String> pa, ByteBuffer in_data) throws org.apache.thrift.TException
    {
      opencv_rpc_args args = new opencv_rpc_args();
      args.setFun_name(fun_name);
      args.setPa(pa);
      args.setIn_data(in_data);
      sendBase("opencv_rpc", args);
    }

    public ByteBuffer recv_opencv_rpc() throws org.apache.thrift.TException
    {
      opencv_rpc_result result = new opencv_rpc_result();
      receiveBase(result, "opencv_rpc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "opencv_rpc failed: unknown result");
    }

    public ByteBuffer read_image(String file_name, Map<String,String> pa) throws org.apache.thrift.TException
    {
      send_read_image(file_name, pa);
      return recv_read_image();
    }

    public void send_read_image(String file_name, Map<String,String> pa) throws org.apache.thrift.TException
    {
      read_image_args args = new read_image_args();
      args.setFile_name(file_name);
      args.setPa(pa);
      sendBase("read_image", args);
    }

    public ByteBuffer recv_read_image() throws org.apache.thrift.TException
    {
      read_image_result result = new read_image_result();
      receiveBase(result, "read_image");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "read_image failed: unknown result");
    }

    public List<String> image_match(ByteBuffer img_data, List<String> pa) throws org.apache.thrift.TException
    {
      send_image_match(img_data, pa);
      return recv_image_match();
    }

    public void send_image_match(ByteBuffer img_data, List<String> pa) throws org.apache.thrift.TException
    {
      image_match_args args = new image_match_args();
      args.setImg_data(img_data);
      args.setPa(pa);
      sendBase("image_match", args);
    }

    public List<String> recv_image_match() throws org.apache.thrift.TException
    {
      image_match_result result = new image_match_result();
      receiveBase(result, "image_match");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "image_match failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void hello_string(String para, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hello_string_call method_call = new hello_string_call(para, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hello_string_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String para;
      public hello_string_call(String para, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.para = para;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hello_string", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hello_string_args args = new hello_string_args();
        args.setPara(para);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_hello_string();
      }
    }

    public void opencv_rpc(String fun_name, List<String> pa, ByteBuffer in_data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      opencv_rpc_call method_call = new opencv_rpc_call(fun_name, pa, in_data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class opencv_rpc_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fun_name;
      private List<String> pa;
      private ByteBuffer in_data;
      public opencv_rpc_call(String fun_name, List<String> pa, ByteBuffer in_data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fun_name = fun_name;
        this.pa = pa;
        this.in_data = in_data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("opencv_rpc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        opencv_rpc_args args = new opencv_rpc_args();
        args.setFun_name(fun_name);
        args.setPa(pa);
        args.setIn_data(in_data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_opencv_rpc();
      }
    }

    public void read_image(String file_name, Map<String,String> pa, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      read_image_call method_call = new read_image_call(file_name, pa, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class read_image_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String file_name;
      private Map<String,String> pa;
      public read_image_call(String file_name, Map<String,String> pa, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.file_name = file_name;
        this.pa = pa;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("read_image", org.apache.thrift.protocol.TMessageType.CALL, 0));
        read_image_args args = new read_image_args();
        args.setFile_name(file_name);
        args.setPa(pa);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_read_image();
      }
    }

    public void image_match(ByteBuffer img_data, List<String> pa, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      image_match_call method_call = new image_match_call(img_data, pa, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class image_match_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer img_data;
      private List<String> pa;
      public image_match_call(ByteBuffer img_data, List<String> pa, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.img_data = img_data;
        this.pa = pa;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("image_match", org.apache.thrift.protocol.TMessageType.CALL, 0));
        image_match_args args = new image_match_args();
        args.setImg_data(img_data);
        args.setPa(pa);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_image_match();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("hello_string", new hello_string());
      processMap.put("opencv_rpc", new opencv_rpc());
      processMap.put("read_image", new read_image());
      processMap.put("image_match", new image_match());
      return processMap;
    }

    public static class hello_string<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hello_string_args> {
      public hello_string() {
        super("hello_string");
      }

      public hello_string_args getEmptyArgsInstance() {
        return new hello_string_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public hello_string_result getResult(I iface, hello_string_args args) throws org.apache.thrift.TException {
        hello_string_result result = new hello_string_result();
        result.success = iface.hello_string(args.para);
        return result;
      }
    }

    public static class opencv_rpc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, opencv_rpc_args> {
      public opencv_rpc() {
        super("opencv_rpc");
      }

      public opencv_rpc_args getEmptyArgsInstance() {
        return new opencv_rpc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public opencv_rpc_result getResult(I iface, opencv_rpc_args args) throws org.apache.thrift.TException {
        opencv_rpc_result result = new opencv_rpc_result();
        result.success = iface.opencv_rpc(args.fun_name, args.pa, args.in_data);
        return result;
      }
    }

    public static class read_image<I extends Iface> extends org.apache.thrift.ProcessFunction<I, read_image_args> {
      public read_image() {
        super("read_image");
      }

      public read_image_args getEmptyArgsInstance() {
        return new read_image_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public read_image_result getResult(I iface, read_image_args args) throws org.apache.thrift.TException {
        read_image_result result = new read_image_result();
        result.success = iface.read_image(args.file_name, args.pa);
        return result;
      }
    }

    public static class image_match<I extends Iface> extends org.apache.thrift.ProcessFunction<I, image_match_args> {
      public image_match() {
        super("image_match");
      }

      public image_match_args getEmptyArgsInstance() {
        return new image_match_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public image_match_result getResult(I iface, image_match_args args) throws org.apache.thrift.TException {
        image_match_result result = new image_match_result();
        result.success = iface.image_match(args.img_data, args.pa);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("hello_string", new hello_string());
      processMap.put("opencv_rpc", new opencv_rpc());
      processMap.put("read_image", new read_image());
      processMap.put("image_match", new image_match());
      return processMap;
    }

    public static class hello_string<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hello_string_args, String> {
      public hello_string() {
        super("hello_string");
      }

      public hello_string_args getEmptyArgsInstance() {
        return new hello_string_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            hello_string_result result = new hello_string_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            hello_string_result result = new hello_string_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hello_string_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.hello_string(args.para,resultHandler);
      }
    }

    public static class opencv_rpc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, opencv_rpc_args, ByteBuffer> {
      public opencv_rpc() {
        super("opencv_rpc");
      }

      public opencv_rpc_args getEmptyArgsInstance() {
        return new opencv_rpc_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            opencv_rpc_result result = new opencv_rpc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            opencv_rpc_result result = new opencv_rpc_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, opencv_rpc_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.opencv_rpc(args.fun_name, args.pa, args.in_data,resultHandler);
      }
    }

    public static class read_image<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, read_image_args, ByteBuffer> {
      public read_image() {
        super("read_image");
      }

      public read_image_args getEmptyArgsInstance() {
        return new read_image_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            read_image_result result = new read_image_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            read_image_result result = new read_image_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, read_image_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.read_image(args.file_name, args.pa,resultHandler);
      }
    }

    public static class image_match<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, image_match_args, List<String>> {
      public image_match() {
        super("image_match");
      }

      public image_match_args getEmptyArgsInstance() {
        return new image_match_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            image_match_result result = new image_match_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            image_match_result result = new image_match_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, image_match_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.image_match(args.img_data, args.pa,resultHandler);
      }
    }

  }

  public static class hello_string_args implements org.apache.thrift.TBase<hello_string_args, hello_string_args._Fields>, java.io.Serializable, Cloneable, Comparable<hello_string_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hello_string_args");

    private static final org.apache.thrift.protocol.TField PARA_FIELD_DESC = new org.apache.thrift.protocol.TField("para", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hello_string_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hello_string_argsTupleSchemeFactory());
    }

    public String para; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARA((short)1, "para");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARA
            return PARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARA, new org.apache.thrift.meta_data.FieldMetaData("para", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hello_string_args.class, metaDataMap);
    }

    public hello_string_args() {
    }

    public hello_string_args(
      String para)
    {
      this();
      this.para = para;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hello_string_args(hello_string_args other) {
      if (other.isSetPara()) {
        this.para = other.para;
      }
    }

    public hello_string_args deepCopy() {
      return new hello_string_args(this);
    }

    @Override
    public void clear() {
      this.para = null;
    }

    public String getPara() {
      return this.para;
    }

    public hello_string_args setPara(String para) {
      this.para = para;
      return this;
    }

    public void unsetPara() {
      this.para = null;
    }

    /** Returns true if field para is set (has been assigned a value) and false otherwise */
    public boolean isSetPara() {
      return this.para != null;
    }

    public void setParaIsSet(boolean value) {
      if (!value) {
        this.para = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARA:
        if (value == null) {
          unsetPara();
        } else {
          setPara((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARA:
        return getPara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARA:
        return isSetPara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hello_string_args)
        return this.equals((hello_string_args)that);
      return false;
    }

    public boolean equals(hello_string_args that) {
      if (that == null)
        return false;

      boolean this_present_para = true && this.isSetPara();
      boolean that_present_para = true && that.isSetPara();
      if (this_present_para || that_present_para) {
        if (!(this_present_para && that_present_para))
          return false;
        if (!this.para.equals(that.para))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_para = true && (isSetPara());
      list.add(present_para);
      if (present_para)
        list.add(para);

      return list.hashCode();
    }

    @Override
    public int compareTo(hello_string_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPara()).compareTo(other.isSetPara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para, other.para);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hello_string_args(");
      boolean first = true;

      sb.append("para:");
      if (this.para == null) {
        sb.append("null");
      } else {
        sb.append(this.para);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hello_string_argsStandardSchemeFactory implements SchemeFactory {
      public hello_string_argsStandardScheme getScheme() {
        return new hello_string_argsStandardScheme();
      }
    }

    private static class hello_string_argsStandardScheme extends StandardScheme<hello_string_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hello_string_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.para = iprot.readString();
                struct.setParaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hello_string_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.para != null) {
          oprot.writeFieldBegin(PARA_FIELD_DESC);
          oprot.writeString(struct.para);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hello_string_argsTupleSchemeFactory implements SchemeFactory {
      public hello_string_argsTupleScheme getScheme() {
        return new hello_string_argsTupleScheme();
      }
    }

    private static class hello_string_argsTupleScheme extends TupleScheme<hello_string_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hello_string_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPara()) {
          oprot.writeString(struct.para);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hello_string_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.para = iprot.readString();
          struct.setParaIsSet(true);
        }
      }
    }

  }

  public static class hello_string_result implements org.apache.thrift.TBase<hello_string_result, hello_string_result._Fields>, java.io.Serializable, Cloneable, Comparable<hello_string_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hello_string_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new hello_string_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new hello_string_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hello_string_result.class, metaDataMap);
    }

    public hello_string_result() {
    }

    public hello_string_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hello_string_result(hello_string_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public hello_string_result deepCopy() {
      return new hello_string_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public hello_string_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof hello_string_result)
        return this.equals((hello_string_result)that);
      return false;
    }

    public boolean equals(hello_string_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(hello_string_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("hello_string_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hello_string_resultStandardSchemeFactory implements SchemeFactory {
      public hello_string_resultStandardScheme getScheme() {
        return new hello_string_resultStandardScheme();
      }
    }

    private static class hello_string_resultStandardScheme extends StandardScheme<hello_string_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hello_string_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hello_string_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hello_string_resultTupleSchemeFactory implements SchemeFactory {
      public hello_string_resultTupleScheme getScheme() {
        return new hello_string_resultTupleScheme();
      }
    }

    private static class hello_string_resultTupleScheme extends TupleScheme<hello_string_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hello_string_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hello_string_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class opencv_rpc_args implements org.apache.thrift.TBase<opencv_rpc_args, opencv_rpc_args._Fields>, java.io.Serializable, Cloneable, Comparable<opencv_rpc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("opencv_rpc_args");

    private static final org.apache.thrift.protocol.TField FUN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fun_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PA_FIELD_DESC = new org.apache.thrift.protocol.TField("pa", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField IN_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("in_data", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new opencv_rpc_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new opencv_rpc_argsTupleSchemeFactory());
    }

    public String fun_name; // required
    public List<String> pa; // required
    public ByteBuffer in_data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUN_NAME((short)1, "fun_name"),
      PA((short)2, "pa"),
      IN_DATA((short)3, "in_data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUN_NAME
            return FUN_NAME;
          case 2: // PA
            return PA;
          case 3: // IN_DATA
            return IN_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUN_NAME, new org.apache.thrift.meta_data.FieldMetaData("fun_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PA, new org.apache.thrift.meta_data.FieldMetaData("pa", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.IN_DATA, new org.apache.thrift.meta_data.FieldMetaData("in_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(opencv_rpc_args.class, metaDataMap);
    }

    public opencv_rpc_args() {
    }

    public opencv_rpc_args(
      String fun_name,
      List<String> pa,
      ByteBuffer in_data)
    {
      this();
      this.fun_name = fun_name;
      this.pa = pa;
      this.in_data = org.apache.thrift.TBaseHelper.copyBinary(in_data);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public opencv_rpc_args(opencv_rpc_args other) {
      if (other.isSetFun_name()) {
        this.fun_name = other.fun_name;
      }
      if (other.isSetPa()) {
        List<String> __this__pa = new ArrayList<String>(other.pa);
        this.pa = __this__pa;
      }
      if (other.isSetIn_data()) {
        this.in_data = org.apache.thrift.TBaseHelper.copyBinary(other.in_data);
      }
    }

    public opencv_rpc_args deepCopy() {
      return new opencv_rpc_args(this);
    }

    @Override
    public void clear() {
      this.fun_name = null;
      this.pa = null;
      this.in_data = null;
    }

    public String getFun_name() {
      return this.fun_name;
    }

    public opencv_rpc_args setFun_name(String fun_name) {
      this.fun_name = fun_name;
      return this;
    }

    public void unsetFun_name() {
      this.fun_name = null;
    }

    /** Returns true if field fun_name is set (has been assigned a value) and false otherwise */
    public boolean isSetFun_name() {
      return this.fun_name != null;
    }

    public void setFun_nameIsSet(boolean value) {
      if (!value) {
        this.fun_name = null;
      }
    }

    public int getPaSize() {
      return (this.pa == null) ? 0 : this.pa.size();
    }

    public java.util.Iterator<String> getPaIterator() {
      return (this.pa == null) ? null : this.pa.iterator();
    }

    public void addToPa(String elem) {
      if (this.pa == null) {
        this.pa = new ArrayList<String>();
      }
      this.pa.add(elem);
    }

    public List<String> getPa() {
      return this.pa;
    }

    public opencv_rpc_args setPa(List<String> pa) {
      this.pa = pa;
      return this;
    }

    public void unsetPa() {
      this.pa = null;
    }

    /** Returns true if field pa is set (has been assigned a value) and false otherwise */
    public boolean isSetPa() {
      return this.pa != null;
    }

    public void setPaIsSet(boolean value) {
      if (!value) {
        this.pa = null;
      }
    }

    public byte[] getIn_data() {
      setIn_data(org.apache.thrift.TBaseHelper.rightSize(in_data));
      return in_data == null ? null : in_data.array();
    }

    public ByteBuffer bufferForIn_data() {
      return org.apache.thrift.TBaseHelper.copyBinary(in_data);
    }

    public opencv_rpc_args setIn_data(byte[] in_data) {
      this.in_data = in_data == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(in_data, in_data.length));
      return this;
    }

    public opencv_rpc_args setIn_data(ByteBuffer in_data) {
      this.in_data = org.apache.thrift.TBaseHelper.copyBinary(in_data);
      return this;
    }

    public void unsetIn_data() {
      this.in_data = null;
    }

    /** Returns true if field in_data is set (has been assigned a value) and false otherwise */
    public boolean isSetIn_data() {
      return this.in_data != null;
    }

    public void setIn_dataIsSet(boolean value) {
      if (!value) {
        this.in_data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUN_NAME:
        if (value == null) {
          unsetFun_name();
        } else {
          setFun_name((String)value);
        }
        break;

      case PA:
        if (value == null) {
          unsetPa();
        } else {
          setPa((List<String>)value);
        }
        break;

      case IN_DATA:
        if (value == null) {
          unsetIn_data();
        } else {
          setIn_data((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUN_NAME:
        return getFun_name();

      case PA:
        return getPa();

      case IN_DATA:
        return getIn_data();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUN_NAME:
        return isSetFun_name();
      case PA:
        return isSetPa();
      case IN_DATA:
        return isSetIn_data();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof opencv_rpc_args)
        return this.equals((opencv_rpc_args)that);
      return false;
    }

    public boolean equals(opencv_rpc_args that) {
      if (that == null)
        return false;

      boolean this_present_fun_name = true && this.isSetFun_name();
      boolean that_present_fun_name = true && that.isSetFun_name();
      if (this_present_fun_name || that_present_fun_name) {
        if (!(this_present_fun_name && that_present_fun_name))
          return false;
        if (!this.fun_name.equals(that.fun_name))
          return false;
      }

      boolean this_present_pa = true && this.isSetPa();
      boolean that_present_pa = true && that.isSetPa();
      if (this_present_pa || that_present_pa) {
        if (!(this_present_pa && that_present_pa))
          return false;
        if (!this.pa.equals(that.pa))
          return false;
      }

      boolean this_present_in_data = true && this.isSetIn_data();
      boolean that_present_in_data = true && that.isSetIn_data();
      if (this_present_in_data || that_present_in_data) {
        if (!(this_present_in_data && that_present_in_data))
          return false;
        if (!this.in_data.equals(that.in_data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_fun_name = true && (isSetFun_name());
      list.add(present_fun_name);
      if (present_fun_name)
        list.add(fun_name);

      boolean present_pa = true && (isSetPa());
      list.add(present_pa);
      if (present_pa)
        list.add(pa);

      boolean present_in_data = true && (isSetIn_data());
      list.add(present_in_data);
      if (present_in_data)
        list.add(in_data);

      return list.hashCode();
    }

    @Override
    public int compareTo(opencv_rpc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFun_name()).compareTo(other.isSetFun_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFun_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fun_name, other.fun_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPa()).compareTo(other.isSetPa());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPa()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pa, other.pa);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIn_data()).compareTo(other.isSetIn_data());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIn_data()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.in_data, other.in_data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("opencv_rpc_args(");
      boolean first = true;

      sb.append("fun_name:");
      if (this.fun_name == null) {
        sb.append("null");
      } else {
        sb.append(this.fun_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pa:");
      if (this.pa == null) {
        sb.append("null");
      } else {
        sb.append(this.pa);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("in_data:");
      if (this.in_data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.in_data, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class opencv_rpc_argsStandardSchemeFactory implements SchemeFactory {
      public opencv_rpc_argsStandardScheme getScheme() {
        return new opencv_rpc_argsStandardScheme();
      }
    }

    private static class opencv_rpc_argsStandardScheme extends StandardScheme<opencv_rpc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, opencv_rpc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fun_name = iprot.readString();
                struct.setFun_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.pa = new ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.pa.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setPaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IN_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.in_data = iprot.readBinary();
                struct.setIn_dataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, opencv_rpc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fun_name != null) {
          oprot.writeFieldBegin(FUN_NAME_FIELD_DESC);
          oprot.writeString(struct.fun_name);
          oprot.writeFieldEnd();
        }
        if (struct.pa != null) {
          oprot.writeFieldBegin(PA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.pa.size()));
            for (String _iter3 : struct.pa)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.in_data != null) {
          oprot.writeFieldBegin(IN_DATA_FIELD_DESC);
          oprot.writeBinary(struct.in_data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class opencv_rpc_argsTupleSchemeFactory implements SchemeFactory {
      public opencv_rpc_argsTupleScheme getScheme() {
        return new opencv_rpc_argsTupleScheme();
      }
    }

    private static class opencv_rpc_argsTupleScheme extends TupleScheme<opencv_rpc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, opencv_rpc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFun_name()) {
          optionals.set(0);
        }
        if (struct.isSetPa()) {
          optionals.set(1);
        }
        if (struct.isSetIn_data()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFun_name()) {
          oprot.writeString(struct.fun_name);
        }
        if (struct.isSetPa()) {
          {
            oprot.writeI32(struct.pa.size());
            for (String _iter4 : struct.pa)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetIn_data()) {
          oprot.writeBinary(struct.in_data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, opencv_rpc_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fun_name = iprot.readString();
          struct.setFun_nameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.pa = new ArrayList<String>(_list5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.pa.add(_elem6);
            }
          }
          struct.setPaIsSet(true);
        }
        if (incoming.get(2)) {
          struct.in_data = iprot.readBinary();
          struct.setIn_dataIsSet(true);
        }
      }
    }

  }

  public static class opencv_rpc_result implements org.apache.thrift.TBase<opencv_rpc_result, opencv_rpc_result._Fields>, java.io.Serializable, Cloneable, Comparable<opencv_rpc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("opencv_rpc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new opencv_rpc_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new opencv_rpc_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(opencv_rpc_result.class, metaDataMap);
    }

    public opencv_rpc_result() {
    }

    public opencv_rpc_result(
      ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public opencv_rpc_result(opencv_rpc_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public opencv_rpc_result deepCopy() {
      return new opencv_rpc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public opencv_rpc_result setSuccess(byte[] success) {
      this.success = success == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(success, success.length));
      return this;
    }

    public opencv_rpc_result setSuccess(ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof opencv_rpc_result)
        return this.equals((opencv_rpc_result)that);
      return false;
    }

    public boolean equals(opencv_rpc_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(opencv_rpc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("opencv_rpc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class opencv_rpc_resultStandardSchemeFactory implements SchemeFactory {
      public opencv_rpc_resultStandardScheme getScheme() {
        return new opencv_rpc_resultStandardScheme();
      }
    }

    private static class opencv_rpc_resultStandardScheme extends StandardScheme<opencv_rpc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, opencv_rpc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, opencv_rpc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class opencv_rpc_resultTupleSchemeFactory implements SchemeFactory {
      public opencv_rpc_resultTupleScheme getScheme() {
        return new opencv_rpc_resultTupleScheme();
      }
    }

    private static class opencv_rpc_resultTupleScheme extends TupleScheme<opencv_rpc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, opencv_rpc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, opencv_rpc_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class read_image_args implements org.apache.thrift.TBase<read_image_args, read_image_args._Fields>, java.io.Serializable, Cloneable, Comparable<read_image_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read_image_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("file_name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PA_FIELD_DESC = new org.apache.thrift.protocol.TField("pa", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read_image_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read_image_argsTupleSchemeFactory());
    }

    public String file_name; // required
    public Map<String,String> pa; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "file_name"),
      PA((short)2, "pa");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          case 2: // PA
            return PA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("file_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PA, new org.apache.thrift.meta_data.FieldMetaData("pa", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read_image_args.class, metaDataMap);
    }

    public read_image_args() {
    }

    public read_image_args(
      String file_name,
      Map<String,String> pa)
    {
      this();
      this.file_name = file_name;
      this.pa = pa;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read_image_args(read_image_args other) {
      if (other.isSetFile_name()) {
        this.file_name = other.file_name;
      }
      if (other.isSetPa()) {
        Map<String,String> __this__pa = new HashMap<String,String>(other.pa);
        this.pa = __this__pa;
      }
    }

    public read_image_args deepCopy() {
      return new read_image_args(this);
    }

    @Override
    public void clear() {
      this.file_name = null;
      this.pa = null;
    }

    public String getFile_name() {
      return this.file_name;
    }

    public read_image_args setFile_name(String file_name) {
      this.file_name = file_name;
      return this;
    }

    public void unsetFile_name() {
      this.file_name = null;
    }

    /** Returns true if field file_name is set (has been assigned a value) and false otherwise */
    public boolean isSetFile_name() {
      return this.file_name != null;
    }

    public void setFile_nameIsSet(boolean value) {
      if (!value) {
        this.file_name = null;
      }
    }

    public int getPaSize() {
      return (this.pa == null) ? 0 : this.pa.size();
    }

    public void putToPa(String key, String val) {
      if (this.pa == null) {
        this.pa = new HashMap<String,String>();
      }
      this.pa.put(key, val);
    }

    public Map<String,String> getPa() {
      return this.pa;
    }

    public read_image_args setPa(Map<String,String> pa) {
      this.pa = pa;
      return this;
    }

    public void unsetPa() {
      this.pa = null;
    }

    /** Returns true if field pa is set (has been assigned a value) and false otherwise */
    public boolean isSetPa() {
      return this.pa != null;
    }

    public void setPaIsSet(boolean value) {
      if (!value) {
        this.pa = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFile_name();
        } else {
          setFile_name((String)value);
        }
        break;

      case PA:
        if (value == null) {
          unsetPa();
        } else {
          setPa((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFile_name();

      case PA:
        return getPa();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFile_name();
      case PA:
        return isSetPa();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read_image_args)
        return this.equals((read_image_args)that);
      return false;
    }

    public boolean equals(read_image_args that) {
      if (that == null)
        return false;

      boolean this_present_file_name = true && this.isSetFile_name();
      boolean that_present_file_name = true && that.isSetFile_name();
      if (this_present_file_name || that_present_file_name) {
        if (!(this_present_file_name && that_present_file_name))
          return false;
        if (!this.file_name.equals(that.file_name))
          return false;
      }

      boolean this_present_pa = true && this.isSetPa();
      boolean that_present_pa = true && that.isSetPa();
      if (this_present_pa || that_present_pa) {
        if (!(this_present_pa && that_present_pa))
          return false;
        if (!this.pa.equals(that.pa))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_file_name = true && (isSetFile_name());
      list.add(present_file_name);
      if (present_file_name)
        list.add(file_name);

      boolean present_pa = true && (isSetPa());
      list.add(present_pa);
      if (present_pa)
        list.add(pa);

      return list.hashCode();
    }

    @Override
    public int compareTo(read_image_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFile_name()).compareTo(other.isSetFile_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_name, other.file_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPa()).compareTo(other.isSetPa());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPa()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pa, other.pa);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read_image_args(");
      boolean first = true;

      sb.append("file_name:");
      if (this.file_name == null) {
        sb.append("null");
      } else {
        sb.append(this.file_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pa:");
      if (this.pa == null) {
        sb.append("null");
      } else {
        sb.append(this.pa);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read_image_argsStandardSchemeFactory implements SchemeFactory {
      public read_image_argsStandardScheme getScheme() {
        return new read_image_argsStandardScheme();
      }
    }

    private static class read_image_argsStandardScheme extends StandardScheme<read_image_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read_image_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file_name = iprot.readString();
                struct.setFile_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.pa = new HashMap<String,String>(2*_map8.size);
                  String _key9;
                  String _val10;
                  for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                  {
                    _key9 = iprot.readString();
                    _val10 = iprot.readString();
                    struct.pa.put(_key9, _val10);
                  }
                  iprot.readMapEnd();
                }
                struct.setPaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read_image_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.file_name != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.file_name);
          oprot.writeFieldEnd();
        }
        if (struct.pa != null) {
          oprot.writeFieldBegin(PA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.pa.size()));
            for (Map.Entry<String, String> _iter12 : struct.pa.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeString(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read_image_argsTupleSchemeFactory implements SchemeFactory {
      public read_image_argsTupleScheme getScheme() {
        return new read_image_argsTupleScheme();
      }
    }

    private static class read_image_argsTupleScheme extends TupleScheme<read_image_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read_image_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFile_name()) {
          optionals.set(0);
        }
        if (struct.isSetPa()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFile_name()) {
          oprot.writeString(struct.file_name);
        }
        if (struct.isSetPa()) {
          {
            oprot.writeI32(struct.pa.size());
            for (Map.Entry<String, String> _iter13 : struct.pa.entrySet())
            {
              oprot.writeString(_iter13.getKey());
              oprot.writeString(_iter13.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read_image_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.file_name = iprot.readString();
          struct.setFile_nameIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.pa = new HashMap<String,String>(2*_map14.size);
            String _key15;
            String _val16;
            for (int _i17 = 0; _i17 < _map14.size; ++_i17)
            {
              _key15 = iprot.readString();
              _val16 = iprot.readString();
              struct.pa.put(_key15, _val16);
            }
          }
          struct.setPaIsSet(true);
        }
      }
    }

  }

  public static class read_image_result implements org.apache.thrift.TBase<read_image_result, read_image_result._Fields>, java.io.Serializable, Cloneable, Comparable<read_image_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read_image_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read_image_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read_image_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read_image_result.class, metaDataMap);
    }

    public read_image_result() {
    }

    public read_image_result(
      ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read_image_result(read_image_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public read_image_result deepCopy() {
      return new read_image_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public read_image_result setSuccess(byte[] success) {
      this.success = success == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(success, success.length));
      return this;
    }

    public read_image_result setSuccess(ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read_image_result)
        return this.equals((read_image_result)that);
      return false;
    }

    public boolean equals(read_image_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(read_image_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read_image_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read_image_resultStandardSchemeFactory implements SchemeFactory {
      public read_image_resultStandardScheme getScheme() {
        return new read_image_resultStandardScheme();
      }
    }

    private static class read_image_resultStandardScheme extends StandardScheme<read_image_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read_image_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read_image_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read_image_resultTupleSchemeFactory implements SchemeFactory {
      public read_image_resultTupleScheme getScheme() {
        return new read_image_resultTupleScheme();
      }
    }

    private static class read_image_resultTupleScheme extends TupleScheme<read_image_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read_image_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read_image_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class image_match_args implements org.apache.thrift.TBase<image_match_args, image_match_args._Fields>, java.io.Serializable, Cloneable, Comparable<image_match_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("image_match_args");

    private static final org.apache.thrift.protocol.TField IMG_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("img_data", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PA_FIELD_DESC = new org.apache.thrift.protocol.TField("pa", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new image_match_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new image_match_argsTupleSchemeFactory());
    }

    public ByteBuffer img_data; // required
    public List<String> pa; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMG_DATA((short)1, "img_data"),
      PA((short)2, "pa");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMG_DATA
            return IMG_DATA;
          case 2: // PA
            return PA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMG_DATA, new org.apache.thrift.meta_data.FieldMetaData("img_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.PA, new org.apache.thrift.meta_data.FieldMetaData("pa", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(image_match_args.class, metaDataMap);
    }

    public image_match_args() {
    }

    public image_match_args(
      ByteBuffer img_data,
      List<String> pa)
    {
      this();
      this.img_data = org.apache.thrift.TBaseHelper.copyBinary(img_data);
      this.pa = pa;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public image_match_args(image_match_args other) {
      if (other.isSetImg_data()) {
        this.img_data = org.apache.thrift.TBaseHelper.copyBinary(other.img_data);
      }
      if (other.isSetPa()) {
        List<String> __this__pa = new ArrayList<String>(other.pa);
        this.pa = __this__pa;
      }
    }

    public image_match_args deepCopy() {
      return new image_match_args(this);
    }

    @Override
    public void clear() {
      this.img_data = null;
      this.pa = null;
    }

    public byte[] getImg_data() {
      setImg_data(org.apache.thrift.TBaseHelper.rightSize(img_data));
      return img_data == null ? null : img_data.array();
    }

    public ByteBuffer bufferForImg_data() {
      return org.apache.thrift.TBaseHelper.copyBinary(img_data);
    }

    public image_match_args setImg_data(byte[] img_data) {
      this.img_data = img_data == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(img_data, img_data.length));
      return this;
    }

    public image_match_args setImg_data(ByteBuffer img_data) {
      this.img_data = org.apache.thrift.TBaseHelper.copyBinary(img_data);
      return this;
    }

    public void unsetImg_data() {
      this.img_data = null;
    }

    /** Returns true if field img_data is set (has been assigned a value) and false otherwise */
    public boolean isSetImg_data() {
      return this.img_data != null;
    }

    public void setImg_dataIsSet(boolean value) {
      if (!value) {
        this.img_data = null;
      }
    }

    public int getPaSize() {
      return (this.pa == null) ? 0 : this.pa.size();
    }

    public java.util.Iterator<String> getPaIterator() {
      return (this.pa == null) ? null : this.pa.iterator();
    }

    public void addToPa(String elem) {
      if (this.pa == null) {
        this.pa = new ArrayList<String>();
      }
      this.pa.add(elem);
    }

    public List<String> getPa() {
      return this.pa;
    }

    public image_match_args setPa(List<String> pa) {
      this.pa = pa;
      return this;
    }

    public void unsetPa() {
      this.pa = null;
    }

    /** Returns true if field pa is set (has been assigned a value) and false otherwise */
    public boolean isSetPa() {
      return this.pa != null;
    }

    public void setPaIsSet(boolean value) {
      if (!value) {
        this.pa = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMG_DATA:
        if (value == null) {
          unsetImg_data();
        } else {
          setImg_data((ByteBuffer)value);
        }
        break;

      case PA:
        if (value == null) {
          unsetPa();
        } else {
          setPa((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMG_DATA:
        return getImg_data();

      case PA:
        return getPa();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMG_DATA:
        return isSetImg_data();
      case PA:
        return isSetPa();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof image_match_args)
        return this.equals((image_match_args)that);
      return false;
    }

    public boolean equals(image_match_args that) {
      if (that == null)
        return false;

      boolean this_present_img_data = true && this.isSetImg_data();
      boolean that_present_img_data = true && that.isSetImg_data();
      if (this_present_img_data || that_present_img_data) {
        if (!(this_present_img_data && that_present_img_data))
          return false;
        if (!this.img_data.equals(that.img_data))
          return false;
      }

      boolean this_present_pa = true && this.isSetPa();
      boolean that_present_pa = true && that.isSetPa();
      if (this_present_pa || that_present_pa) {
        if (!(this_present_pa && that_present_pa))
          return false;
        if (!this.pa.equals(that.pa))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_img_data = true && (isSetImg_data());
      list.add(present_img_data);
      if (present_img_data)
        list.add(img_data);

      boolean present_pa = true && (isSetPa());
      list.add(present_pa);
      if (present_pa)
        list.add(pa);

      return list.hashCode();
    }

    @Override
    public int compareTo(image_match_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetImg_data()).compareTo(other.isSetImg_data());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImg_data()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img_data, other.img_data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPa()).compareTo(other.isSetPa());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPa()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pa, other.pa);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("image_match_args(");
      boolean first = true;

      sb.append("img_data:");
      if (this.img_data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.img_data, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pa:");
      if (this.pa == null) {
        sb.append("null");
      } else {
        sb.append(this.pa);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class image_match_argsStandardSchemeFactory implements SchemeFactory {
      public image_match_argsStandardScheme getScheme() {
        return new image_match_argsStandardScheme();
      }
    }

    private static class image_match_argsStandardScheme extends StandardScheme<image_match_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, image_match_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMG_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.img_data = iprot.readBinary();
                struct.setImg_dataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.pa = new ArrayList<String>(_list18.size);
                  String _elem19;
                  for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                  {
                    _elem19 = iprot.readString();
                    struct.pa.add(_elem19);
                  }
                  iprot.readListEnd();
                }
                struct.setPaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, image_match_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.img_data != null) {
          oprot.writeFieldBegin(IMG_DATA_FIELD_DESC);
          oprot.writeBinary(struct.img_data);
          oprot.writeFieldEnd();
        }
        if (struct.pa != null) {
          oprot.writeFieldBegin(PA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.pa.size()));
            for (String _iter21 : struct.pa)
            {
              oprot.writeString(_iter21);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class image_match_argsTupleSchemeFactory implements SchemeFactory {
      public image_match_argsTupleScheme getScheme() {
        return new image_match_argsTupleScheme();
      }
    }

    private static class image_match_argsTupleScheme extends TupleScheme<image_match_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, image_match_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImg_data()) {
          optionals.set(0);
        }
        if (struct.isSetPa()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetImg_data()) {
          oprot.writeBinary(struct.img_data);
        }
        if (struct.isSetPa()) {
          {
            oprot.writeI32(struct.pa.size());
            for (String _iter22 : struct.pa)
            {
              oprot.writeString(_iter22);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, image_match_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.img_data = iprot.readBinary();
          struct.setImg_dataIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.pa = new ArrayList<String>(_list23.size);
            String _elem24;
            for (int _i25 = 0; _i25 < _list23.size; ++_i25)
            {
              _elem24 = iprot.readString();
              struct.pa.add(_elem24);
            }
          }
          struct.setPaIsSet(true);
        }
      }
    }

  }

  public static class image_match_result implements org.apache.thrift.TBase<image_match_result, image_match_result._Fields>, java.io.Serializable, Cloneable, Comparable<image_match_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("image_match_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new image_match_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new image_match_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(image_match_result.class, metaDataMap);
    }

    public image_match_result() {
    }

    public image_match_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public image_match_result(image_match_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public image_match_result deepCopy() {
      return new image_match_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public image_match_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof image_match_result)
        return this.equals((image_match_result)that);
      return false;
    }

    public boolean equals(image_match_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(image_match_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("image_match_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class image_match_resultStandardSchemeFactory implements SchemeFactory {
      public image_match_resultStandardScheme getScheme() {
        return new image_match_resultStandardScheme();
      }
    }

    private static class image_match_resultStandardScheme extends StandardScheme<image_match_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, image_match_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list26.size);
                  String _elem27;
                  for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                  {
                    _elem27 = iprot.readString();
                    struct.success.add(_elem27);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, image_match_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter29 : struct.success)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class image_match_resultTupleSchemeFactory implements SchemeFactory {
      public image_match_resultTupleScheme getScheme() {
        return new image_match_resultTupleScheme();
      }
    }

    private static class image_match_resultTupleScheme extends TupleScheme<image_match_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, image_match_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter30 : struct.success)
            {
              oprot.writeString(_iter30);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, image_match_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list31.size);
            String _elem32;
            for (int _i33 = 0; _i33 < _list31.size; ++_i33)
            {
              _elem32 = iprot.readString();
              struct.success.add(_elem32);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
