/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TranData_H
#define TranData_H

#include <thrift/TDispatchProcessor.h>
#include "cvrpc_types.h"

namespace cvrpc {

class TranDataIf {
 public:
  virtual ~TranDataIf() {}
  virtual void hello_string(std::string& _return, const std::string& para) = 0;
  virtual void opencv_rpc(std::string& _return, const std::string& fun_name, const std::vector<std::string> & pa, const std::string& in_data) = 0;
  virtual void read_image(std::string& _return, const std::string& file_hash, const std::map<std::string, std::string> & pa) = 0;
  virtual void image_match(std::vector<std::string> & _return, const std::string& img_data, const std::vector<std::string> & pa) = 0;
};

class TranDataIfFactory {
 public:
  typedef TranDataIf Handler;

  virtual ~TranDataIfFactory() {}

  virtual TranDataIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TranDataIf* /* handler */) = 0;
};

class TranDataIfSingletonFactory : virtual public TranDataIfFactory {
 public:
  TranDataIfSingletonFactory(const boost::shared_ptr<TranDataIf>& iface) : iface_(iface) {}
  virtual ~TranDataIfSingletonFactory() {}

  virtual TranDataIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TranDataIf* /* handler */) {}

 protected:
  boost::shared_ptr<TranDataIf> iface_;
};

class TranDataNull : virtual public TranDataIf {
 public:
  virtual ~TranDataNull() {}
  void hello_string(std::string& /* _return */, const std::string& /* para */) {
    return;
  }
  void opencv_rpc(std::string& /* _return */, const std::string& /* fun_name */, const std::vector<std::string> & /* pa */, const std::string& /* in_data */) {
    return;
  }
  void read_image(std::string& /* _return */, const std::string& /* file_hash */, const std::map<std::string, std::string> & /* pa */) {
    return;
  }
  void image_match(std::vector<std::string> & /* _return */, const std::string& /* img_data */, const std::vector<std::string> & /* pa */) {
    return;
  }
};

typedef struct _TranData_hello_string_args__isset {
  _TranData_hello_string_args__isset() : para(false) {}
  bool para :1;
} _TranData_hello_string_args__isset;

class TranData_hello_string_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TranData_hello_string_args(const TranData_hello_string_args&);
  TranData_hello_string_args& operator=(const TranData_hello_string_args&);
  TranData_hello_string_args() : para() {
  }

  virtual ~TranData_hello_string_args() throw();
  std::string para;

  _TranData_hello_string_args__isset __isset;

  void __set_para(const std::string& val);

  bool operator == (const TranData_hello_string_args & rhs) const
  {
    if (!(para == rhs.para))
      return false;
    return true;
  }
  bool operator != (const TranData_hello_string_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_hello_string_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TranData_hello_string_args& obj);
};


class TranData_hello_string_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~TranData_hello_string_pargs() throw();
  const std::string* para;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TranData_hello_string_pargs& obj);
};

typedef struct _TranData_hello_string_result__isset {
  _TranData_hello_string_result__isset() : success(false) {}
  bool success :1;
} _TranData_hello_string_result__isset;

class TranData_hello_string_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  TranData_hello_string_result(const TranData_hello_string_result&);
  TranData_hello_string_result& operator=(const TranData_hello_string_result&);
  TranData_hello_string_result() : success() {
  }

  virtual ~TranData_hello_string_result() throw();
  std::string success;

  _TranData_hello_string_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TranData_hello_string_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TranData_hello_string_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_hello_string_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TranData_hello_string_result& obj);
};

typedef struct _TranData_hello_string_presult__isset {
  _TranData_hello_string_presult__isset() : success(false) {}
  bool success :1;
} _TranData_hello_string_presult__isset;

class TranData_hello_string_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~TranData_hello_string_presult() throw();
  std::string* success;

  _TranData_hello_string_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TranData_hello_string_presult& obj);
};

typedef struct _TranData_opencv_rpc_args__isset {
  _TranData_opencv_rpc_args__isset() : fun_name(false), pa(false), in_data(false) {}
  bool fun_name :1;
  bool pa :1;
  bool in_data :1;
} _TranData_opencv_rpc_args__isset;

class TranData_opencv_rpc_args {
 public:

  static const char* ascii_fingerprint; // = "7BEB3DE36E7027E445A803D0B7F91899";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0xEB,0x3D,0xE3,0x6E,0x70,0x27,0xE4,0x45,0xA8,0x03,0xD0,0xB7,0xF9,0x18,0x99};

  TranData_opencv_rpc_args(const TranData_opencv_rpc_args&);
  TranData_opencv_rpc_args& operator=(const TranData_opencv_rpc_args&);
  TranData_opencv_rpc_args() : fun_name(), in_data() {
  }

  virtual ~TranData_opencv_rpc_args() throw();
  std::string fun_name;
  std::vector<std::string>  pa;
  std::string in_data;

  _TranData_opencv_rpc_args__isset __isset;

  void __set_fun_name(const std::string& val);

  void __set_pa(const std::vector<std::string> & val);

  void __set_in_data(const std::string& val);

  bool operator == (const TranData_opencv_rpc_args & rhs) const
  {
    if (!(fun_name == rhs.fun_name))
      return false;
    if (!(pa == rhs.pa))
      return false;
    if (!(in_data == rhs.in_data))
      return false;
    return true;
  }
  bool operator != (const TranData_opencv_rpc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_opencv_rpc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TranData_opencv_rpc_args& obj);
};


class TranData_opencv_rpc_pargs {
 public:

  static const char* ascii_fingerprint; // = "7BEB3DE36E7027E445A803D0B7F91899";
  static const uint8_t binary_fingerprint[16]; // = {0x7B,0xEB,0x3D,0xE3,0x6E,0x70,0x27,0xE4,0x45,0xA8,0x03,0xD0,0xB7,0xF9,0x18,0x99};


  virtual ~TranData_opencv_rpc_pargs() throw();
  const std::string* fun_name;
  const std::vector<std::string> * pa;
  const std::string* in_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TranData_opencv_rpc_pargs& obj);
};

typedef struct _TranData_opencv_rpc_result__isset {
  _TranData_opencv_rpc_result__isset() : success(false) {}
  bool success :1;
} _TranData_opencv_rpc_result__isset;

class TranData_opencv_rpc_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  TranData_opencv_rpc_result(const TranData_opencv_rpc_result&);
  TranData_opencv_rpc_result& operator=(const TranData_opencv_rpc_result&);
  TranData_opencv_rpc_result() : success() {
  }

  virtual ~TranData_opencv_rpc_result() throw();
  std::string success;

  _TranData_opencv_rpc_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TranData_opencv_rpc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TranData_opencv_rpc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_opencv_rpc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TranData_opencv_rpc_result& obj);
};

typedef struct _TranData_opencv_rpc_presult__isset {
  _TranData_opencv_rpc_presult__isset() : success(false) {}
  bool success :1;
} _TranData_opencv_rpc_presult__isset;

class TranData_opencv_rpc_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~TranData_opencv_rpc_presult() throw();
  std::string* success;

  _TranData_opencv_rpc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TranData_opencv_rpc_presult& obj);
};

typedef struct _TranData_read_image_args__isset {
  _TranData_read_image_args__isset() : file_hash(false), pa(false) {}
  bool file_hash :1;
  bool pa :1;
} _TranData_read_image_args__isset;

class TranData_read_image_args {
 public:

  static const char* ascii_fingerprint; // = "F7C641917C22B35AE581CCD54910B00D";
  static const uint8_t binary_fingerprint[16]; // = {0xF7,0xC6,0x41,0x91,0x7C,0x22,0xB3,0x5A,0xE5,0x81,0xCC,0xD5,0x49,0x10,0xB0,0x0D};

  TranData_read_image_args(const TranData_read_image_args&);
  TranData_read_image_args& operator=(const TranData_read_image_args&);
  TranData_read_image_args() : file_hash() {
  }

  virtual ~TranData_read_image_args() throw();
  std::string file_hash;
  std::map<std::string, std::string>  pa;

  _TranData_read_image_args__isset __isset;

  void __set_file_hash(const std::string& val);

  void __set_pa(const std::map<std::string, std::string> & val);

  bool operator == (const TranData_read_image_args & rhs) const
  {
    if (!(file_hash == rhs.file_hash))
      return false;
    if (!(pa == rhs.pa))
      return false;
    return true;
  }
  bool operator != (const TranData_read_image_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_read_image_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TranData_read_image_args& obj);
};


class TranData_read_image_pargs {
 public:

  static const char* ascii_fingerprint; // = "F7C641917C22B35AE581CCD54910B00D";
  static const uint8_t binary_fingerprint[16]; // = {0xF7,0xC6,0x41,0x91,0x7C,0x22,0xB3,0x5A,0xE5,0x81,0xCC,0xD5,0x49,0x10,0xB0,0x0D};


  virtual ~TranData_read_image_pargs() throw();
  const std::string* file_hash;
  const std::map<std::string, std::string> * pa;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TranData_read_image_pargs& obj);
};

typedef struct _TranData_read_image_result__isset {
  _TranData_read_image_result__isset() : success(false) {}
  bool success :1;
} _TranData_read_image_result__isset;

class TranData_read_image_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  TranData_read_image_result(const TranData_read_image_result&);
  TranData_read_image_result& operator=(const TranData_read_image_result&);
  TranData_read_image_result() : success() {
  }

  virtual ~TranData_read_image_result() throw();
  std::string success;

  _TranData_read_image_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TranData_read_image_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TranData_read_image_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_read_image_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TranData_read_image_result& obj);
};

typedef struct _TranData_read_image_presult__isset {
  _TranData_read_image_presult__isset() : success(false) {}
  bool success :1;
} _TranData_read_image_presult__isset;

class TranData_read_image_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~TranData_read_image_presult() throw();
  std::string* success;

  _TranData_read_image_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TranData_read_image_presult& obj);
};

typedef struct _TranData_image_match_args__isset {
  _TranData_image_match_args__isset() : img_data(false), pa(false) {}
  bool img_data :1;
  bool pa :1;
} _TranData_image_match_args__isset;

class TranData_image_match_args {
 public:

  static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

  TranData_image_match_args(const TranData_image_match_args&);
  TranData_image_match_args& operator=(const TranData_image_match_args&);
  TranData_image_match_args() : img_data() {
  }

  virtual ~TranData_image_match_args() throw();
  std::string img_data;
  std::vector<std::string>  pa;

  _TranData_image_match_args__isset __isset;

  void __set_img_data(const std::string& val);

  void __set_pa(const std::vector<std::string> & val);

  bool operator == (const TranData_image_match_args & rhs) const
  {
    if (!(img_data == rhs.img_data))
      return false;
    if (!(pa == rhs.pa))
      return false;
    return true;
  }
  bool operator != (const TranData_image_match_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_image_match_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TranData_image_match_args& obj);
};


class TranData_image_match_pargs {
 public:

  static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};


  virtual ~TranData_image_match_pargs() throw();
  const std::string* img_data;
  const std::vector<std::string> * pa;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TranData_image_match_pargs& obj);
};

typedef struct _TranData_image_match_result__isset {
  _TranData_image_match_result__isset() : success(false) {}
  bool success :1;
} _TranData_image_match_result__isset;

class TranData_image_match_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  TranData_image_match_result(const TranData_image_match_result&);
  TranData_image_match_result& operator=(const TranData_image_match_result&);
  TranData_image_match_result() {
  }

  virtual ~TranData_image_match_result() throw();
  std::vector<std::string>  success;

  _TranData_image_match_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const TranData_image_match_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TranData_image_match_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_image_match_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TranData_image_match_result& obj);
};

typedef struct _TranData_image_match_presult__isset {
  _TranData_image_match_presult__isset() : success(false) {}
  bool success :1;
} _TranData_image_match_presult__isset;

class TranData_image_match_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~TranData_image_match_presult() throw();
  std::vector<std::string> * success;

  _TranData_image_match_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TranData_image_match_presult& obj);
};

class TranDataClient : virtual public TranDataIf {
 public:
  TranDataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TranDataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void hello_string(std::string& _return, const std::string& para);
  void send_hello_string(const std::string& para);
  void recv_hello_string(std::string& _return);
  void opencv_rpc(std::string& _return, const std::string& fun_name, const std::vector<std::string> & pa, const std::string& in_data);
  void send_opencv_rpc(const std::string& fun_name, const std::vector<std::string> & pa, const std::string& in_data);
  void recv_opencv_rpc(std::string& _return);
  void read_image(std::string& _return, const std::string& file_hash, const std::map<std::string, std::string> & pa);
  void send_read_image(const std::string& file_hash, const std::map<std::string, std::string> & pa);
  void recv_read_image(std::string& _return);
  void image_match(std::vector<std::string> & _return, const std::string& img_data, const std::vector<std::string> & pa);
  void send_image_match(const std::string& img_data, const std::vector<std::string> & pa);
  void recv_image_match(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TranDataProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TranDataIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TranDataProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_hello_string(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_opencv_rpc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_image(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_image_match(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TranDataProcessor(boost::shared_ptr<TranDataIf> iface) :
    iface_(iface) {
    processMap_["hello_string"] = &TranDataProcessor::process_hello_string;
    processMap_["opencv_rpc"] = &TranDataProcessor::process_opencv_rpc;
    processMap_["read_image"] = &TranDataProcessor::process_read_image;
    processMap_["image_match"] = &TranDataProcessor::process_image_match;
  }

  virtual ~TranDataProcessor() {}
};

class TranDataProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TranDataProcessorFactory(const ::boost::shared_ptr< TranDataIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TranDataIfFactory > handlerFactory_;
};

class TranDataMultiface : virtual public TranDataIf {
 public:
  TranDataMultiface(std::vector<boost::shared_ptr<TranDataIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TranDataMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TranDataIf> > ifaces_;
  TranDataMultiface() {}
  void add(boost::shared_ptr<TranDataIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void hello_string(std::string& _return, const std::string& para) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hello_string(_return, para);
    }
    ifaces_[i]->hello_string(_return, para);
    return;
  }

  void opencv_rpc(std::string& _return, const std::string& fun_name, const std::vector<std::string> & pa, const std::string& in_data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->opencv_rpc(_return, fun_name, pa, in_data);
    }
    ifaces_[i]->opencv_rpc(_return, fun_name, pa, in_data);
    return;
  }

  void read_image(std::string& _return, const std::string& file_hash, const std::map<std::string, std::string> & pa) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read_image(_return, file_hash, pa);
    }
    ifaces_[i]->read_image(_return, file_hash, pa);
    return;
  }

  void image_match(std::vector<std::string> & _return, const std::string& img_data, const std::vector<std::string> & pa) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->image_match(_return, img_data, pa);
    }
    ifaces_[i]->image_match(_return, img_data, pa);
    return;
  }

};

} // namespace

#endif
